import json
from backend.node.genvm.icontract import IContract
from backend.node.genvm.equivalence_principle import EquivalencePrinciple

class FlightInsurance(IContract):

    def __init__(self, _flight_number: str, _flight_date: str, _flight_time: str, _flight_from: str, _flight_to: str, _num_passengers_paid_insurance: int, _insurance_value_per_passenger: int):
        self.flight_number = _flight_number
        self.num_passengers_paid_insurance = _num_passengers_paid_insurance
        self.flight_departure_delayed = False
        self.flight_date = _flight_date
        self.flight_time = _flight_time
        self.flight_from = _flight_from
        self.flight_to = _flight_to
        self.resolution_url = "https://flightaware.com/live/flight/" + self.flight_number  + "/history/" + self.flight_date + "/" + self.flight_time + "/" + self.flight_from + "/" + self.flight_to
        self.loss_payment_value_per_passenger = _insurance_value_per_passenger
        self.balances = {}
        self.balances[contract_runner.from_address] = _num_passengers_paid_insurance*_insurance_value_per_passenger
        self.insurance_manager = contract_runner.from_address

    async def ask_for_flight_status(self) -> None:
        print("calling the page: " + self.resolution_url)
        final_result = {}
        async with EquivalencePrinciple(
            result=final_result,
            principle="The flight status must be the same",
            comparative=True,
        ) as eq:
            web_data = await eq.get_webpage(self.resolution_url)
            print(web_data)
            prompt = f"""
In the following web page, find if the flight was delayed or not:
Web page content:
{web_data} 
End of web page data.
Respond using ONLY the following format:
{{
"departure_status": bool // True if the flight was delayed or False if it was on time
}}
It is mandatory that you respond only using the JSON format above,
nothing else. Don't include any other words or characters,
your output must be only JSON without any formatting prefix or suffix.
This result should be perfectly parseable by a JSON parser without errors.
"""
            result = await eq.call_llm(prompt)
            print(result)        
            result_clean = result.replace("True", "true").replace("False", "false")
            output = json.loads(result_clean)
            if output["departure_status"] is True:
                self.flight_departure_delayed = True
    
    def add_passenger(self, _passenger_address:str) ->None:
        self.balances[_passenger_address] = 0

    def insurance_claim(self, _passenger_address:str) ->None:
        if self.flight_departure_delayed is True:
            if _passenger_address in self.balances:
                self.balances[_passenger_address] = self.loss_payment_value_per_passenger
                self.balances[self.insurance_manager] = (self.balances[self.insurance_manager]-self.loss_payment_value_per_passenger)


